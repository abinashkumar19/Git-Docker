name: Deploy to EC2 with Docker & ECR

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug - List repository files
        run: |
          echo "Current directory: $(pwd)"
          ls -R

      - name: Install AWS CLI
        run: |
          set -e
          echo "🔹 Updating package lists..."
          sudo apt-get update
          sudo apt-get install -y unzip || { echo "Failed to install unzip"; exit 1; }
          echo "🔹 Detecting architecture..."
          ARCH=$(uname -m)
          if [ "$ARCH" = "x86_64" ]; then
            URL="https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
          elif [ "$ARCH" = "aarch64" ]; then
            URL="https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip"
          else
            echo "❌ Unsupported architecture: $ARCH"
            exit 1
          fi
          echo "Architecture: $ARCH, URL: $URL"
          echo "🔹 Downloading AWS CLI..."
          curl -sSL "$URL" -o "awscliv2.zip" || { echo "Failed to download AWS CLI"; exit 1; }
          echo "🔹 Verifying download..."
          if [ ! -f "awscliv2.zip" ]; then
            echo "❌ Download failed: awscliv2.zip not found"
            exit 1
          fi
          echo "🔹 Unzipping AWS CLI..."
          unzip -q awscliv2.zip || { echo "Failed to unzip awscliv2.zip"; exit 1; }
          echo "🔹 Installing AWS CLI..."
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update || { echo "Failed to install AWS CLI"; exit 1; }
          echo "🔹 Verifying AWS CLI installation..."
          aws --version || { echo "AWS CLI installation verification failed"; exit 1; }

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repository exists
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME || 'myapp-repo' }}
        run: |
          aws ecr describe-repositories \
            --repository-names $ECR_REPOSITORY \
            --region $AWS_REGION || \
          aws ecr create-repository \
            --repository-name $ECR_REPOSITORY \
            --region $AWS_REGION \
            --image-scanning-configuration scanOnPush=true

      - name: Build, Tag, and Push image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME || 'myapp-repo' }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./frontend-app
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -e
            echo "🔹 Updating EC2 instance..."
            if command -v yum &> /dev/null; then
              sudo yum update -y
            elif command -v dnf &> /dev/null; then
              sudo dnf update -y
            else
              echo "❌ No supported package manager found (yum/dnf)"
              exit 1
            fi

            echo "🔹 Installing Docker if missing..."
            if ! command -v docker &> /dev/null; then
              sudo yum install -y docker || sudo dnf install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ec2-user
            fi

            echo "🔹 Verifying Docker service and permissions..."
            sudo systemctl is-active --quiet docker || { echo "❌ Docker service is not running"; sudo systemctl start docker; }
            groups ec2-user | grep docker || { echo "⚠️ ec2-user not in docker group"; sudo usermod -aG docker ec2-user; }

            echo "🔹 Installing AWS CLI if missing..."
            if ! command -v aws &> /dev/null; then
              sudo yum install -y awscli || sudo dnf install -y awscli
            fi

            echo "🔹 Logging into ECR..."
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
              | sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            echo "🔹 Pulling latest image..."
            sudo docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME || 'myapp-repo' }}:latest

            echo "🔹 Stopping and removing old container..."
            if sudo docker ps -q -f name=myapp | grep .; then
              sudo docker stop myapp
              sudo docker rm myapp
            else
              echo "No running container named 'myapp' found."
            fi

            echo "🔹 Running new container..."
            sudo docker run -d --name myapp -p 80:80 ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME || 'myapp-repo' }}:latest

            echo "🔹 Deployment complete."
            sudo docker ps -a
